# -*- coding: utf-8 -*-
"""project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UJ_dlwjCpz5eMzJAs8FmdbDPZ1YGC7Qw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import svm

df = pd.read_csv("loan.csv")
df.head()

df.info()

df.isnull().sum()

df['loanAmount_log'] = np.log(df['LoanAmount'])
df['loanAmount_log'].hist(bins=20)

df.isnull().sum()

df['TotalIcome'] = df['ApplicantIncome'] + df['CoapplicantIncome']
df['TotalIcome_log'] = np.log(df['TotalIcome'])
df['TotalIcome_log'].hist(bins=20)

df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)
df['Married'].fillna(df['Married'].mode()[0], inplace=True)
df['Dependents'].fillna(df['Dependents'].mode()[0], inplace=True)
df['Self_Employed'].fillna(df['Self_Employed'].mode()[0], inplace=True)

df.LoanAmount = df.LoanAmount.fillna(df.LoanAmount.mean())
df.loanAmount_log = df.loanAmount_log.fillna(df.loanAmount_log.mean())
df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0], inplace=True)
df['Credit_History'].fillna(df['Credit_History'].mode()[0], inplace=True)
df.isnull().sum()

x = df.iloc[:,np.r_[1:5 , 9:11 , 13:15]].values
y = df.iloc[:, 12].values

print("Percentage of missing gender is %2f%%" %((df['Gender'].isnull().sum()/df.shape[0])*100))

print("Number of people who take loan as Group by Gender : ")
print(df['Gender'].value_counts())
sns.countplot(x='Gender', data=df , palette='Set1')

print("Number of people who take loan as Group by Marital Status : ")
print(df['Married'].value_counts())
sns.countplot(x='Married', data=df , palette='Set1')

print("Number of people who take loan as Group by Dependent : ")
print(df['Dependents'].value_counts())
sns.countplot(x='Dependents', data=df , palette='Set1')

print("Number of people who take loan as Group by LaonAmount : ")
print(df['LoanAmount'].value_counts())
sns.countplot(x='LoanAmount', data=df , palette='Set1')

print("Number of people who take loan as Group by Credit History : ")
print(df['Credit_History'].value_counts())
sns.countplot(x='Credit_History', data=df , palette='Set1')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

from sklearn.preprocessing import LabelEncoder
Labelencoder_x = LabelEncoder()

for i in range(0 , 5):
  X_train[:,i]= Labelencoder_x.fit_transform(X_train[:,i])
  X_train[:,7]= Labelencoder_x.fit_transform(X_train[:,7])

X_train

Labelencoder_y = LabelEncoder()
y_train = Labelencoder_y.fit_transform(y_train)
y_train

for i in range(0 , 5):
  X_test[:,i]= Labelencoder_x.fit_transform(X_test[:,i])
  X_test[:,7]= Labelencoder_x.fit_transform(X_test[:,7])

X_test





Labelencoder_y = LabelEncoder()
y_test = Labelencoder_y.fit_transform(y_test)
y_test

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X_train = ss.fit_transform(X_train)
X_test = ss.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100)
classifier.fit(X_train, y_train)

from sklearn import metrics
y_pred = classifier.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

y_pred

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

y_pred

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

y_pred

from skelarn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=5)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

y_pred



